#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatModoki:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//io
var io = require('socket.io').listen(server);

var roomCount = {};

io.sockets.on('connection', function(socket) {

  var thisName = null;
  var thisRoom = null;

  socket.on('chat', function(chat) {
    socket.to(thisRoom).emit('chat', {
      name: thisName,
      message: chat.message
    });
    socket.emit('chat', {
      name: thisName,
      message: chat.message
    });
  });

  socket.on('join', function(data) {
    thisName = data.name;
    thisRoom = data.room;
    socket.join(thisRoom);
    if (typeof roomCount[thisRoom] === 'undefined') {
      roomCount[thisRoom] = 1;
    }
    else {
      roomCount[thisRoom] ++;
    }
    console.log(socket.id + ' joined room ' + thisRoom + ' , now ' + roomCount[thisRoom] + ' people');
    socket.to(thisRoom).emit('join', {
      name: thisName,
      join: true
    });
    socket.emit('join', {
      self: true,
      count: roomCount[thisRoom] - 1
    });
  });

  socket.on('disconnect', function() {
    console.log(socket.id + ' disconnect');
    roomCount[thisRoom] --;
    socket.to(thisRoom).emit('join', {
      name: thisName,
      join: false
    });
  });
});
